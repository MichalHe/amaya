import pytest

from amaya.alphabet import LSBF_Alphabet
from amaya.automatons import NFA
from amaya.mtbdd_automatons import MTBDD_NFA

from amaya.relations_structures import Relation
from amaya.presburger.constructions.integers import build_nfa_from_linear_inequality


def test_try_encode_sharp_inequality_into_mtbdd_nfa():
    ineq = Relation(variable_names=['x', 'y', 'z'],
                    variable_coeficients=[1, 1, 1],
                    modulo_terms=[],
                    modulo_term_coeficients=[],
                    absolute_part=-1,
                    operation='<=')

    variable_id_pairs = [('x', 1), ('y', 2), ('z', 3)]
    alphabet = LSBF_Alphabet.from_variable_id_pairs(variable_id_pairs)

    mtbdd_nfa = build_nfa_from_linear_inequality(ineq, variable_id_pairs, alphabet, MTBDD_NFA)
    nfa = build_nfa_from_linear_inequality(ineq, variable_id_pairs, alphabet, NFA)

    nfa_transitions = set(nfa.transition_fn.iter())
    mtbdd_transitions = set(mtbdd_nfa.transition_fn.iter())

    failure_desc = 'The transition functions should have the same number of transitions'
    assert len(nfa_transitions) == len(mtbdd_transitions)
        
    for t in nfa_transitions:
        assert t in mtbdd_transitions, f'Found a transition that is in the transitions generated by mtbdd: {t}'
